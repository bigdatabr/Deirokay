workflow:
  rules:
    # For merge requests
    - if: "$CI_MERGE_REQUEST_IID"
    # For commit into master
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    # For commit into dev branch
    - if: '$CI_COMMIT_BRANCH == "dev"'
    # For tags
    - if: "$CI_COMMIT_TAG"

variables:
  # Where to store pip cache
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip-cache"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip-cache

stages:
  - code quality
  - ci setup
  - test
  - deploy

syntax-checker:
  stage: code quality
  image: registry.bigdata/ci-images/syntax-checker
  rules:
    - if: '$CI_MERGE_REQUEST_IID'
      allow_failure: false
    - allow_failure: true
  interruptible: true
  variables:
    GIT_DEPTH: 0
  script:
    - |
      if [[ -n "$CI_MERGE_REQUEST_IID" ]]; then
        echo "Changed files (except deleted):"
        git diff --diff-filter=d --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        PYTHON_TOUCHED_FILES=$(git diff --diff-filter=d --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME | { grep -E '\.py$' || :; })

        if [[ -n "$PYTHON_TOUCHED_FILES" ]]; then
          flake8 $PYTHON_TOUCHED_FILES --exclude=docs,htmlcov,venv,.cache,.coverage,.git
          isort -c $PYTHON_TOUCHED_FILES
        fi
      else
        flake8 --exclude=docs,htmlcov,venv,.cache,.coverage,.git
        isort -c *
      fi

docstr-coverage:
  stage: code quality
  image: registry.bigdata/ci-images/docstr-coverage
  allow_failure: true
  interruptible: true
  variables:
    GIT_DEPTH: 0
  script:
    - |
      if [[ -n "$CI_MERGE_REQUEST_IID" ]]; then
        echo "Since this is a Merge Request, only the following files will be checked:"
        git diff --diff-filter=d --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME | { grep -E '\.py$' || :; }
        PYTHON_TOUCHED_FILES=$(git diff --diff-filter=d --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME | { grep -E '\.py$' || :; })

        if [[ -n "$PYTHON_TOUCHED_FILES" ]]; then
          docstr-coverage $PYTHON_TOUCHED_FILES --config .docstr.yml
        fi
      else
        docstr-coverage * --badge=badge.svg --config .docstr.yml
      fi
  artifacts:
    paths:
      - badge.svg
    when: always

Build and Push CI Docker Image:
  stage: ci setup
  image: docker:20.10.8
  interruptible: true
  services:
    - name: docker:20.10.8-dind
      command: ["--insecure-registry", "registry.bigdata"]
  variables:
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo -n $CI_REGISTRY_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build -f Dockerfile.ci --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

unit-test:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  interruptible: true
  before_script:
    - python -V
    - ls -al
    - pip install .[dev]
  script:
    - pytest --cov=. -vvv --disable-warnings

pages:
  stage: deploy
  image: registry.bigdata/ci-images/sphinx-rtd
  interruptible: true
  needs:
    - Build and Push CI Docker Image
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - cd docs/
    - make clean html
    - cp -r build/html ../public/
  artifacts:
    paths:
    - public
